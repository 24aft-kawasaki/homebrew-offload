#!/usr/bin/env python3

import argparse
import os
import shutil
import subprocess
import sys
from pathlib import Path

class BrewOffload:
    def __init__(self, args: list[str]) -> None:
        self.args = arg_parse(*args)
        self.target_path = (DEFAULT_TARGET_PATH := Path("./offload"))
        self.brew_cellar_path = self.get_brew_cellar_path()
    
    @staticmethod
    def get_brew_cellar_path() -> Path:
        result = subprocess.run(
            ["brew", "--cellar"],
            capture_output=True, text=True, check=True
        )
        return Path(result.stdout.strip())

    def execute(self) -> int:
        return 0
    
    def get_offload_formulae(self) -> list[str]:
        return ["python@3.12"]
    
    def offload(self) -> int:
        offload_formulae = self.get_offload_formulae()
        for formula in offload_formulae:
            src = self.brew_cellar_path / formula
            dst = (self.target_path / formula).absolute()
            if (src).is_symlink():
                continue
            shutil.copytree(src, dst,
                symlinks=True, dirs_exist_ok=True)
            shutil.rmtree(src)
            os.symlink(dst, src, target_is_directory=True)
        return 0

    def execute_original_brew(self, original_brew_args: list[str]) -> int:
        completedProcess = subprocess.run(
            ["brew"] + original_brew_args,
            stdout=None, stderr=None
        )

        return completedProcess.returncode

        

def arg_parse(*args: str) -> argparse.Namespace:
    parser = argparse.ArgumentParser()
    
    parser.add_argument("wrapped")
    parser.add_argument("remainder", nargs=argparse.REMAINDER)
    namespace = parser.parse_args(args[1:])
    if namespace.wrapped == "wrapped":
        parser = argparse.ArgumentParser(prog="brew")
        parser.add_argument("offload")
        parser.add_argument("remainder", nargs=argparse.REMAINDER)
        namespace_offload = parser.parse_args(namespace.remainder)
        if namespace_offload.offload == "offload":
            prog = "brew offload"
        else:
            result = argparse.Namespace()
            result.offload = False
            result.original_brew_args = namespace.remainder
            return result
    else:
        prog = "brew-offload"
        namespace_offload = argparse.Namespace()
        namespace_offload.remainder = args[1:]

    parser = argparse.ArgumentParser(prog=prog)
    subparsers = parser.add_subparsers(title="subcommands")
    subparsers.add_parser("add").set_defaults(subcommand="add")
    subparsers.add_parser("remove").set_defaults(subcommand="remove")
    result = parser.parse_args(namespace_offload.remainder)
    result.offload = True

    return result

def main() -> int:
    brew_offload = BrewOffload(sys.argv)
    if brew_offload.args.offload:
        pass
    else:
        return brew_offload.execute_original_brew(brew_offload.args.original_brew_args)
    return 1

if __name__ == "__main__":
    exit(main())
