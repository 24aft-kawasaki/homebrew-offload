#!/usr/bin/env python3.12

import argparse
import sys
import subprocess

class BrewOffload:
    def __init__(self, *args):
        self._args = args
    
    def exec_brew(self):
        """execute brew"""
        subprocess.run(["brew"] + [*self._args])
    
    def exec_custom_offload(self):
        """Execute custom offload operations not provided by Homebrew.

        This method is intended for implementing additional tasks or custom logic
        that extend beyond the standard functionality of Homebrew."""
  
        pass
    
    def offlad(self):
        """offload formulae"""
        pass

def arg_parse(*args: list[str]) -> argparse.Namespace:
    parser = argparse.ArgumentParser()
    
    parser.add_argument("wrapped")
    parser.add_argument("remainder", nargs=argparse.REMAINDER)
    namespace = parser.parse_args(args[1:])
    if namespace.wrapped == "wrapped":
        parser = argparse.ArgumentParser(prog="brew")
        parser.add_argument("offload")
        parser.add_argument("remainder", nargs=argparse.REMAINDER)
        namespace_offload = parser.parse_args(namespace.remainder)
        if namespace_offload.offload == "offload":
            parser = argparse.ArgumentParser(prog="brew offload")
            subparsers = parser.add_subparsers(title="subcommands")
            subparsers.add_parser("add")
            subparsers.add_parser("remove")
            result = parser.parse_args(namespace_offload.remainder)
            result.offload = True
            result.subcommand = namespace_offload.remainder[0]
        else:
            result = argparse.Namespace()
            result.offload = False
            result.original_brew_args = namespace.remainder
    else:
        parser = argparse.ArgumentParser(prog="brew-offload")
        subparsers = parser.add_subparsers(title="subcommands")
        subparsers.add_parser("add")
        subparsers.add_parser("remove")
        result = parser.parse_args(args[1:])
        result.offload = True
        result.subcommand = args[1]

    return result

def main() -> int:
    # parse args
    # if args[0] == "offload":
    #     BrewOffload(*args[1:]).offlad()
    # else:
    #    BrewOffload(*args).exec_brew()
    pass

if __name__ == "__main__":
    exit(main())
